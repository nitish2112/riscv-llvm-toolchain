; ModuleID = 'vvadd-xloops.bc'
source_filename = "vvadd-xloops.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nounwind uwtable
define void @vvadd_xloops(i32* %C, i32* %A, i32* %B, i32 %size) #0 !dbg !6 {
entry:
  %C.addr = alloca i32*, align 8
  %A.addr = alloca i32*, align 8
  %B.addr = alloca i32*, align 8
  %size.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store i32* %C, i32** %C.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %C.addr, metadata !11, metadata !12), !dbg !13
  store i32* %A, i32** %A.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %A.addr, metadata !14, metadata !12), !dbg !15
  store i32* %B, i32** %B.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %B.addr, metadata !16, metadata !12), !dbg !17
  store i32 %size, i32* %size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size.addr, metadata !18, metadata !12), !dbg !19
  call void @llvm.dbg.declare(metadata i32* %i, metadata !20, metadata !12), !dbg !22
  store i32 0, i32* %i, align 4, !dbg !22
  br label %for.cond, !dbg !23

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !24             // load i in %0
  %1 = load i32, i32* %size.addr, align 4, !dbg !27     // load size in %1
  %cmp = icmp slt i32 %0, %1, !dbg !28                  // compare %0 and %1
  br i1 %cmp, label %for.body, label %for.end, !dbg !29 // branch to loop body if not equal

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4, !dbg !30             // load i in %2 : We did not need a phi node for i 
          						// as i is not in registers but is read and written 
							// to from memory
  %idxprom = sext i32 %2 to i64, !dbg !32
  %3 = load i32*, i32** %A.addr, align 8, !dbg !32	// load A.addr to %3

  /*
   The C expression -> float *p = &my_point[7].y;
   would then correspond to the LLVM IR
   %1 = getelementptr %struct.point* %my_point, i32 7, i32 1 
  */
  %arrayidx = getelementptr inbounds i32, i32* %3, i64 %idxprom, !dbg !32   // get the pointer to A[idxprom] ie. A[i] 
  %4 = load i32, i32* %arrayidx, align 4, !dbg !32      // load A[i] in %4
  %5 = load i32, i32* %i, align 4, !dbg !33             // load i in %5 
  %idxprom1 = sext i32 %5 to i64, !dbg !34              
  %6 = load i32*, i32** %B.addr, align 8, !dbg !34      // load B.addr in %6
  %arrayidx2 = getelementptr inbounds i32, i32* %6, i64 %idxprom1, !dbg !34  // get the pointer to B[idxprom1]
  %7 = load i32, i32* %arrayidx2, align 4, !dbg !34     // load B[i] in %7
  %add = add nsw i32 %4, %7, !dbg !35        		// add A[i] and B[i] and save in %add
  %8 = load i32, i32* %i, align 4, !dbg !36		// load i in %8
  %idxprom3 = sext i32 %8 to i64, !dbg !37		
  %9 = load i32*, i32** %C.addr, align 8, !dbg !37	// load C.addr in %9
  %arrayidx4 = getelementptr inbounds i32, i32* %9, i64 %idxprom3, !dbg !37  // get the pointer to C[idxprom2]
  store i32 %add, i32* %arrayidx4, align 4, !dbg !38    // store %add to C[i]
  br label %for.inc, !dbg !39				// jump to for.inc

for.inc:                                          ; preds = %for.body
  %10 = load i32, i32* %i, align 4, !dbg !40		// load i in %10
  %inc = add nsw i32 %10, 1, !dbg !40			// add 1 to i and save in %inc
  store i32 %inc, i32* %i, align 4, !dbg !40		// store inc in i
  br label %for.cond, !dbg !42, !llvm.loop !43		// jump to for.cond

for.end:                                          ; preds = %for.cond
  ret void, !dbg !45
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!3, !4}
!llvm.ident = !{!5}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 3.9.0 (https://github.com/riscv/riscv-clang.git 52e04ed86397148b5cac4c54c27713168d9f1c5e) (git@github.com:nitish2112/riscv-llvm.git 6bb1a18fd05a39f3bffcc5fc4bf5d5b527dca995)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2)
!1 = !DIFile(filename: "vvadd-xloops.c", directory: "/work/zhang/users/nks45/RISCV-LLVM/riscv-llvm/tests")
!2 = !{}
!3 = !{i32 2, !"Dwarf Version", i32 4}
!4 = !{i32 2, !"Debug Info Version", i32 3}
!5 = !{!"clang version 3.9.0 (https://github.com/riscv/riscv-clang.git 52e04ed86397148b5cac4c54c27713168d9f1c5e) (git@github.com:nitish2112/riscv-llvm.git 6bb1a18fd05a39f3bffcc5fc4bf5d5b527dca995)"}
!6 = distinct !DISubprogram(name: "vvadd_xloops", scope: !1, file: !1, line: 7, type: !7, isLocal: false, isDefinition: true, scopeLine: 8, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!7 = !DISubroutineType(types: !8)
!8 = !{null, !9, !9, !9, !10}
!9 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10, size: 64, align: 64)
!10 = !DIBasicType(name: "int", size: 32, align: 32, encoding: DW_ATE_signed)
!11 = !DILocalVariable(name: "C", arg: 1, scope: !6, file: !1, line: 7, type: !9)
!12 = !DIExpression()
!13 = !DILocation(line: 7, column: 24, scope: !6)
!14 = !DILocalVariable(name: "A", arg: 2, scope: !6, file: !1, line: 7, type: !9)
!15 = !DILocation(line: 7, column: 33, scope: !6)
!16 = !DILocalVariable(name: "B", arg: 3, scope: !6, file: !1, line: 7, type: !9)
!17 = !DILocation(line: 7, column: 42, scope: !6)
!18 = !DILocalVariable(name: "size", arg: 4, scope: !6, file: !1, line: 7, type: !10)
!19 = !DILocation(line: 7, column: 51, scope: !6)
!20 = !DILocalVariable(name: "i", scope: !21, file: !1, line: 10, type: !10)
!21 = distinct !DILexicalBlock(scope: !6, file: !1, line: 10, column: 3)
!22 = !DILocation(line: 10, column: 13, scope: !21)
!23 = !DILocation(line: 10, column: 9, scope: !21)
!24 = !DILocation(line: 10, column: 20, scope: !25)
!25 = !DILexicalBlockFile(scope: !26, file: !1, discriminator: 1)
!26 = distinct !DILexicalBlock(scope: !21, file: !1, line: 10, column: 3)
!27 = !DILocation(line: 10, column: 24, scope: !25)
!28 = !DILocation(line: 10, column: 22, scope: !25)
!29 = !DILocation(line: 10, column: 3, scope: !25)
!30 = !DILocation(line: 11, column: 14, scope: !31)
!31 = distinct !DILexicalBlock(scope: !26, file: !1, line: 10, column: 36)
!32 = !DILocation(line: 11, column: 12, scope: !31)
!33 = !DILocation(line: 11, column: 21, scope: !31)
!34 = !DILocation(line: 11, column: 19, scope: !31)
!35 = !DILocation(line: 11, column: 17, scope: !31)
!36 = !DILocation(line: 11, column: 7, scope: !31)
!37 = !DILocation(line: 11, column: 5, scope: !31)
!38 = !DILocation(line: 11, column: 10, scope: !31)
!39 = !DILocation(line: 12, column: 3, scope: !31)
!40 = !DILocation(line: 10, column: 31, scope: !41)
!41 = !DILexicalBlockFile(scope: !26, file: !1, discriminator: 2)
!42 = !DILocation(line: 10, column: 3, scope: !41)
!43 = distinct !{!43, !44}
!44 = !DILocation(line: 10, column: 3, scope: !6)
!45 = !DILocation(line: 13, column: 1, scope: !6)
